h1. oath-ssh-command

Think of this as "authy-ssh":https://github.com/authy/authy-ssh but for OATH [TH]OTP.
So it works:
* offline (when you're cut of from the net but not from the machine you're ssh:ing into)
* without sending any authentication request to an external service.

Currently the only OATH PAM module supported is "Google Authenticator PAM module":https://github.com/google/google-authenticator/
but others are planned (when they arrive). See also "WONTFIX":#wontfix

It also supports using the <code>OTP_TOKEN</code> environment variable for your
token so it can be used with e.g. mosh:
<pre><code>$ export OTP_TOKEN=1337
$ mosh example.com
$</code></pre>

h4. Installation
# Build the code:
<pre><code>$ make</code></pre>
# Put the somewhere you want it to be, <code>/usr/local/bin/</code> is nice.
# In your <code>~/.ssh/authorized_keys</code> add:
<pre><code>command="/usr/local/bin/oath-ssh-command" ssh-rsa AAAAZOMGLOL[â€¦]== awesome key with OTP</code></pre>
# ssh into your machine with that key:
<pre><code>$ ssh awesome-machine
Verification code: 1337
$</code></pre>

h4. WONTFIX
* Since "pam_oath":http://www.nongnu.org/oath-toolkit/ uses one file per server which is owned by root we can't support that (because it would force us to setuid or otherwise run as root).

h4. TODO
* Add tests for:
** multiple keys and OTP-tokens in an hash
* Fix FIXME's in the code
* Support HOTP
* Support these features from Google Authenticator PAM module:
** Support for emergency scratch codes
** Protection against replay attacks
** HOTP
